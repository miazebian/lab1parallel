#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

struct complex {
    float real;
    float imag;
};

int cal_pixel(struct complex c) {
    int count, max;
    struct complex z;
    float temp, lengthsq;
    max = 256;
    z.real = 0; z.imag = 0;
    count = 0;
    do {
        temp = z.real * z.real - z.imag * z.imag + c.real;
        z.imag = 2 * z.real * z.imag + c.imag;
        z.real = temp;
        lengthsq = z.real * z.real + z.imag * z.imag;
        count++;
    } while ((lengthsq < 4.0) && (count < max));
    return count;
}

int main() {
    int width = 800, height = 800;
    int x, y, color;
    struct complex c;
    FILE *fp;
    clock_t start, end;
    double cpu_time_used;

    fp = fopen("mandelbrot.pgm", "w");
    fprintf(fp, "P2\n");
    fprintf(fp, "%d %d\n", width, height);
    fprintf(fp, "255\n");

    start = clock();

    for (y = 0; y < height; y++) {
        for (x = 0; x < width; x++) {
            c.real = ((float)x - width / 2) * 4.0 / width;
            c.imag = ((float)y - height / 2) * 4.0 / width;
            color = cal_pixel(c);
            fprintf(fp, "%d ", color % 256);
        }
        fprintf(fp, "\n");
    }

    end = clock(); // Record the end time

    fclose(fp);

    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC; 

    printf("Computation time: %f seconds\n", cpu_time_used);

    return 0;
}
